name: 'ü§ñ Gemini Code Generator'

on:
  issue_comment:
    types:
      - 'created'

permissions:
  contents: 'write'    # Permiss√£o para escrever no reposit√≥rio (criar branch, commitar)
  pull-requests: 'write' # Permiss√£o para criar Pull Requests
  issues: 'write'

jobs:
  generate-code:
    # Este job s√≥ roda se o coment√°rio contiver o comando exato
    if: contains(github.event.comment.body, '@gemini-cli /generate-code')
    runs-on: 'ubuntu-latest'
    timeout-minutes: 15

    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4'

      - name: 'Run Gemini Code Generation'
        uses: 'google-github-actions/run-gemini-cli@v0'
        id: 'gemini_code_gen'
        with:
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          settings: |-
            {
              "maxSessionTurns": 25,
              "coreTools": [
                "run_shell_command(git checkout -b)",
                "run_shell_command(git add)",
                "run_shell_command(git commit -m)",
                "run_shell_command(git push)",
                "run_shell_command(gh pr create)",
                "run_shell_command(ls -F)",
                "run_shell_command(cat)",
                "run_shell_command(echo)"
              ]
            }
          prompt: |-
            ## REGRA PRINCIPAL
            VOC√ä DEVE RESPONDER E COMENTAR ESTRITAMENTE EM PORTUGU√äS DO BRASIL.

            ## Papel
            Voc√™ √© um engenheiro de software especialista. Sua tarefa √© ler a issue do GitHub, gerar o c√≥digo necess√°rio para implementar a funcionalidade ou corrigir o bug, e abrir um Pull Request com as suas altera√ß√µes.

            ## Passos
            1.  **Analisar a Issue:** Leia o t√≠tulo e a descri√ß√£o da issue atual: "${{ github.event.issue.title }}" e "${{ github.event.issue.body }}". Entenda completamente o que precisa ser feito.
            2.  **Criar uma Nova Branch:** Crie uma nova branch para suas altera√ß√µes. O nome da branch deve ser descritivo, como `feat/issue-${{ github.event.issue.number }}-descricao-curta`. Use: `git checkout -b NOME_DA_BRANCH`
            3.  **Listar Arquivos (se necess√°rio):** Use `ls -F src/js/modules` para ver os arquivos existentes e decidir se precisa criar um novo ou editar um existente.
            4.  **Escrever o C√≥digo:** Escreva o c√≥digo JavaScript, HTML ou CSS necess√°rio. Use `echo "SEU C√ìDIGO AQUI" > src/caminho/do/arquivo.js` para criar ou sobrescrever arquivos.
            5.  **Adicionar e Commitar:** Adicione seus arquivos ao git com `git add .` e fa√ßa o commit com uma mensagem clara, como `git commit -m "feat: Implementa funcionalidade da issue #${{ github.event.issue.number }}"`.
            6.  **Enviar a Branch:** Envie sua nova branch para o reposit√≥rio com `git push origin NOME_DA_BRANCH`.
            7.  **Criar o Pull Request:** Crie um Pull Request para que um humano possa revisar seu trabalho. Use: `gh pr create --title "Implementa Issue #${{ github.event.issue.number }}" --body "Este PR foi gerado por IA para resolver a issue #${{ github.event.issue.number }}. Por favor, revise as altera√ß√µes."`
            8.  **Comentar na Issue:** Volte para a issue original e deixe um coment√°rio informando que voc√™ criou um PR, incluindo o link para ele.

            ## Diretrizes
            - Execute um passo de cada vez.
            - Pense de forma l√≥gica sobre quais arquivos editar. Para o projeto "pomodorus", as l√≥gicas principais est√£o em `src/js/script.js` e `src/js/modules/`.
            - Seja cuidadoso e preciso.
